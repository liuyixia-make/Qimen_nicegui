from datetime import datetime, timedelta, timezone
# from skyfield.api import load, wgs84
from geopy.geocoders import Nominatim
from lunar_python import Lunar  # 用于农历和节气计算
from nicegui import ui

class 奇门遁甲:
    def __init__(self, container=None, 起局时间=None, 起局法='拆补法', 地区=None):
        """
        初始化奇门遁甲排盘类。

        :param container: NiceGUI容器元素（可选，默认为 None），用于 UI 渲染
        :param 起局时间: 起局时间，必须为字符串格式 'YYYY-MM-DD HH:MM'，不能为空
        :param 起局法: 起局方法，支持 '拆补法' 或 '置润法'，默认为 '拆补法'
        :param 地区: 地区名称（如城市名称），用于真太阳时计算，若为 None 则直接使用起局时间
        """
        # 处理起局时间：必须为字符串格式，解析为 datetime 对象
        if not isinstance(起局时间, str):
            raise TypeError("起局时间必须为字符串格式，例如 '2025-06-02 14:00'")
        try:
            self.起局时 = datetime.strptime(起局时间, '%Y-%m-%d %H:%M')
        except ValueError as e:
            raise ValueError(f"起局时间格式错误，应为 'YYYY-MM-DD HH:MM'，例如 '2025-06-02 14:00'，错误：{e}")

        # 确保起局时不带时区信息，以避免与不支持时区的库冲突
        if self.起局时.tzinfo is not None:
            self.起局时 = self.起局时.replace(tzinfo=None)

        self.container = container  # 存储 container，供 NiceGUI 使用，测试时可为 None
        self.地区 = 地区
        self.起局法 = 起局法
        self.经纬度 = None

        # 初始化奇门遁甲数据
        self.奇门遁甲数据 = {
            "起局信息": {
                "起局时间": None,
                "是否真太阳时": False,
                "农历": None,
                "局数": "阳九局",
                "四柱干支": [["乙", "巳"], ["壬", "午"], ["乙", "巳"], ["丁", "亥"]],  # 默认提供一组四柱干支数据
                "四柱纳音": ["覆灯火", "覆灯火", "覆灯火", "覆灯火"],
                "四柱旬空": ["戊子空", "丁巳空", "戊子空", "丁巳空"],
                "符头": None,
                "值符": "天辅",
                "值使": "休门",
                "旬首": "甲寅癸"
            },
            "一宫": {
                "四害": "巽", "宫名": "巽", "方位": "东南", "宫数": "四", "宫支": ["辰", "巳"],
                "宫属性": "木", "宫符号": "☴", "本位星": "天辅星", "本位门": "杜", "隐干": "壬",
                "地八神": "禽", "地盘干": "戊", "地盘干长生": ["养"], "天盘干": "甲",
                "天盘干长生": ["生", "养"], "天盘星": "天冲", "天盘星旺衰": ["相", "旺"],
                "天八神": "值符", "天八神旺衰": ["相", "旺"], "天盘门": "开门", "天盘门旺衰": ["相", "旺"],
                "马星": "马", "空亡": ["辰", "巳"], "建除": "建", "寄宫干": "乙",
                "寄宫干长生": ["生", "养"], "寄宫星": "心", "寄宫星旺衰": ["相", "旺"],
                "格局": ["飞鸟跌穴", "三奇受制", "太白入荧"]
            },
            # 其他宫省略
        }

        # 根据是否提供地区来决定使用真太阳时或直接使用起局时间
        if self.地区:
            # 如果提供了地区，计算真太阳时
            latitude, longitude, true_solar_time = self.真太阳时计算()
            self.奇门遁甲数据["起局信息"]["起局时间"] = true_solar_time.strftime('%Y-%m-%d %H:%M:%S')
            self.奇门遁甲数据["起局信息"]["是否真太阳时"] = True
            self.奇门遁甲数据["起局信息"]["农历"] = self.计算农历(true_solar_time)
            self.奇门遁甲数据["起局信息"]["节气"] = self.计算节气(true_solar_time)
        else:
            # 如果没有提供地区，直接使用起局时间
            self.奇门遁甲数据["起局信息"]["起局时间"] = self.起局时.strftime('%Y-%m-%d %H:%M:%S')
            self.奇门遁甲数据["起局信息"]["是否真太阳时"] = False
            self.奇门遁甲数据["起局信息"]["农历"] = self.计算农历(self.起局时)
            self.奇门遁甲数据["起局信息"]["节气"] = self.计算节气(self.起局时)

    def 计算节气(self, 时间):
        """
        计算当前节气和下一个节气，返回节气列表
        :param 时间: datetime对象
        :return: 节气列表，格式为 [{"name": "节气名", "date": "日期"}, {"name": "节气名", "date": "日期"}]
        """
        import cnlunar
        节气列表 = []
        节气名称 = [
            "立春", "雨水", "惊蛰", "春分", "清明", "谷雨",
            "立夏", "小满", "芒种", "夏至", "小暑", "大暑",
            "立秋", "处暑", "白露", "秋分", "寒露", "霜降",
            "立冬", "小雪", "大雪", "冬至", "小寒", "大寒"
        ]
        
        # 定义2025年的节气时间（精确到秒）
        # 格式：[月, 日, 时, 分, 秒]
        节气时间_2025 = [
            [2, 3, 22, 43, 0],    # 立春 2025-02-03 22:43:00
            [2, 18, 20, 59, 0],   # 雨水 2025-02-18 20:59:00
            [3, 5, 21, 15, 0],    # 惊蛰 2025-03-05 21:15:00
            [3, 20, 22, 1, 0],    # 春分 2025-03-20 22:01:00
            [4, 5, 4, 6, 0],      # 清明 2025-04-05 04:06:00
            [4, 20, 15, 1, 0],    # 谷雨 2025-04-20 15:01:00
            [5, 5, 22, 33, 0],    # 立夏 2025-05-05 22:33:00
            [5, 21, 10, 0, 0],    # 小满 2025-05-21 10:00:00
            [6, 5, 17, 56, 16],   # 芒种 2025-06-05 17:56:16
            [6, 21, 10, 42, 0],   # 夏至 2025-06-21 10:42:00
            [7, 7, 0, 37, 0],     # 小暑 2025-07-07 00:37:00
            [7, 22, 17, 14, 0],   # 大暑 2025-07-22 17:14:00
            [8, 7, 11, 16, 0],    # 立秋 2025-08-07 11:16:00
            [8, 23, 4, 56, 0],    # 处暑 2025-08-23 04:56:00
            [9, 7, 20, 8, 0],     # 白露 2025-09-07 20:08:00
            [9, 23, 7, 20, 0],    # 秋分 2025-09-23 07:20:00
            [10, 8, 14, 21, 0],   # 寒露 2025-10-08 14:21:00
            [10, 23, 16, 27, 0],  # 霜降 2025-10-23 16:27:00
            [11, 7, 14, 40, 0],   # 立冬 2025-11-07 14:40:00
            [11, 22, 9, 36, 0],   # 小雪 2025-11-22 09:36:00
            [12, 7, 2, 22, 0],    # 大雪 2025-12-07 02:22:00
            [12, 21, 17, 3, 0],   # 冬至 2025-12-21 17:03:00
            [1, 5, 11, 14, 0],    # 小寒 2025-01-05 11:14:00
            [1, 20, 5, 20, 0]     # 大寒 2025-01-20 05:20:00
        ]
        
        # 定义2024年的节气时间（精确到分钟）
        节气时间_2024 = [
            [2, 4, 4, 27, 0],     # 立春
            [2, 19, 1, 13, 0],    # 雨水
            [3, 5, 3, 23, 0],     # 惊蛰
            [3, 20, 4, 6, 0],     # 春分
            [4, 4, 10, 2, 0],     # 清明
            [4, 19, 20, 59, 0],   # 谷雨
            [5, 5, 4, 20, 0],     # 立夏
            [5, 20, 16, 0, 0],    # 小满
            [6, 5, 4, 9, 0],      # 芒种
            [6, 20, 16, 51, 0],   # 夏至
            [7, 6, 6, 20, 0],     # 小暑
            [7, 22, 0, 44, 0],    # 大暑
            [8, 7, 17, 9, 0],     # 立秋
            [8, 23, 10, 35, 0],   # 处暑
            [9, 7, 23, 56, 0],    # 白露
            [9, 22, 13, 44, 0],   # 秋分
            [10, 8, 0, 0, 0],     # 寒露
            [10, 23, 2, 43, 0],   # 霜降
            [11, 7, 0, 36, 0],    # 立冬
            [11, 21, 19, 56, 0],  # 小雪
            [12, 6, 12, 17, 0],   # 大雪
            [12, 21, 5, 21, 0],   # 冬至
            [1, 5, 17, 0, 0],     # 小寒 (2024)
            [1, 20, 10, 7, 0]     # 大寒 (2024)
        ]
        
        # 定义2026年的节气时间（精确到分钟）
        节气时间_2026 = [
            [2, 3, 16, 33, 0],    # 立春
            [2, 18, 15, 10, 0],   # 雨水
            [3, 5, 15, 9, 0],     # 惊蛰
            [3, 20, 15, 45, 0],   # 春分
            [4, 4, 22, 9, 0],     # 清明
            [4, 20, 8, 50, 0],    # 谷雨
            [5, 5, 16, 39, 0],    # 立夏
            [5, 21, 3, 55, 0],    # 小满
            [6, 5, 16, 39, 0],    # 芒种
            [6, 21, 4, 32, 0],    # 夏至
            [7, 6, 18, 48, 0],    # 小暑
            [7, 22, 11, 9, 0],    # 大暑
            [8, 7, 5, 30, 0],     # 立秋
            [8, 22, 22, 54, 0],   # 处暑
            [9, 7, 14, 21, 0],    # 白露
            [9, 23, 1, 6, 0],     # 秋分
            [10, 8, 8, 30, 0],    # 寒露
            [10, 23, 10, 9, 0],   # 霜降
            [11, 7, 8, 41, 0],    # 立冬
            [11, 22, 3, 20, 0],   # 小雪
            [12, 6, 20, 23, 0],   # 大雪
            [12, 21, 10, 50, 0],  # 冬至
            [1, 5, 5, 23, 0],     # 小寒
            [1, 19, 23, 39, 0]    # 大寒
        ]
        
        def 获取节气交节时间(年份, 节气索引):
            """
            根据年份和节气索引获取节气交节时间
            
            :param 年份: 年份
            :param 节气索引: 节气在列表中的索引
            :return: 节气交节时间的datetime对象
            """
            # 选择对应年份的节气时间数据
            if 年份 == 2024:
                节气时间 = 节气时间_2024
            elif 年份 == 2025:
                节气时间 = 节气时间_2025
            elif 年份 == 2026:
                节气时间 = 节气时间_2026
            else:
                # 如果没有对应年份的数据，使用2025年的数据作为近似
                节气时间 = 节气时间_2025
                print(f"警告：没有{年份}年的节气数据，使用2025年数据作为近似")
            
            # 获取节气的月、日、时、分
            月, 日, 时, 分, 秒 = 节气时间[节气索引]
            
            # 特殊处理小寒和大寒，它们在1月
            if 节气索引 >= 22:  # 小寒和大寒
                # 如果是小寒和大寒，它们是下一年的节气
                return datetime(年份 + 1, 月, 日, 时, 分, 秒)
            else:
                return datetime(年份, 月, 日, 时, 分, 秒)
        
        try:
            # 使用cnlunar库获取当前节气和下一节气名称
            农历 = cnlunar.Lunar(时间, godType='8char')
            当前节气 = 农历.todaySolarTerms
            下一节气 = 农历.nextSolarTerm
            
            年份 = 时间.year
            月份 = 时间.month
            日期 = 时间.day
            
            # 获取当前节气的索引
            if 当前节气 in 节气名称:
                当前节气索引 = 节气名称.index(当前节气)
                
                # 强制使用当前年份的节气数据
                # 芒种节气通常在6月初，如果当前是6月5日，那么应该是2025年的芒种
                if 当前节气 == "芒种" and 月份 == 6 and 日期 >= 5:
                    当前节气时间 = datetime(年份, 6, 5, 17, 56, 16)
                else:
                    # 计算当前节气的交节时间
                    当前节气时间 = 获取节气交节时间(年份, 当前节气索引)
                    
                    # 如果计算出的交节时间晚于当前时间，说明是去年的节气
                    if 当前节气时间 > 时间:
                        # 使用去年的日期重新计算
                        当前节气时间 = 获取节气交节时间(年份 - 1, 当前节气索引)
                
                节气列表.append({
                    "name": 当前节气,
                    "date": 当前节气时间.strftime("%Y-%m-%d %H:%M:%S")
                })
            
            # 获取下一节气的索引
            if 下一节气 in 节气名称:
                下一节气索引 = 节气名称.index(下一节气)
                
                # 计算下一节气的交节时间
                # 下一节气一定是在当前时间之后，可能是今年的也可能是明年的
                下一节气时间 = 获取节气交节时间(年份, 下一节气索引)
                
                # 如果计算出的交节时间早于当前时间，说明是明年的节气
                if 下一节气时间 < 时间:
                    下一节气时间 = 获取节气交节时间(年份 + 1, 下一节气索引)
                
                节气列表.append({
                    "name": 下一节气,
                    "date": 下一节气时间.strftime("%Y-%m-%d %H:%M:%S")
                })
                
        except Exception as e:
            print(f"获取节气精确时间失败: {str(e)}")
            import traceback
            traceback.print_exc()
            
            # 使用cnlunar库获取基本节气信息
            try:
                农历 = cnlunar.Lunar(时间, godType='8char')
                当前节气 = 农历.todaySolarTerms
                下一节气 = 农历.nextSolarTerm
                下一节气日期 = 农历.nextSolarTermDate
                
                # 添加当前节气信息（使用简化格式）
                if 当前节气:
                    节气列表.append({
                        "name": 当前节气,
                        "date": f"{时间.year}-{时间.month:02d}-{时间.day:02d} 00:00:00"
                    })
                
                # 添加下一节气信息（使用简化格式）
                if 下一节气 and 下一节气日期:
                    月, 日 = 下一节气日期
                    节气列表.append({
                        "name": 下一节气,
                        "date": f"{时间.year}-{月:02d}-{日:02d} 00:00:00"
                    })
            except:
                print("使用cnlunar获取节气信息也失败")
        
        # 如果没有找到任何节气，添加默认节气
        if not 节气列表:
            节气列表 = [
                {"name": "无节气", "date": "无数据"},
                {"name": "无节气", "date": "无数据"}
            ]
        
        return 节气列表

    def 真太阳时计算(self):
        """
        计算真太阳时，返回纬度、经度和真太阳时间，并更新奇门遁甲数据的起局时间。
        如果地区为 None，直接使用起局时间。
        """
        起局时 = self.起局时
        地区 = self.地区

        # 确保起局时是 datetime 类型
        if isinstance(起局时, str):
            try:
                起局时 = datetime.strptime(起局时, '%Y-%m-%d %H:%M')
            except ValueError as e:
                raise ValueError(f"起局时间格式错误，应为 'YYYY-MM-DD HH:MM'，例如 '2025-06-02 14:00'，错误：{e}")

        # 移除时区信息，避免与不支持时区的库冲突
        if 起局时.tzinfo is not None:
            起局时 = 起局时.replace(tzinfo=None)

        # 如果没有提供地区，返回 None 作为纬度和经度
        if not 地区:
            self.奇门遁甲数据["起局信息"]["起局时间"] = 起局时.strftime('%Y-%m-%d %H:%M:%S')
            self.经纬度 = None
            
            # 计算节气信息
            self.奇门遁甲数据["起局信息"]["节气"] = self.计算节气(起局时)
            return None, None, 起局时

        try:
            # 使用 geopy 获取经纬度，增加超时设置
            地理定位器 = Nominatim(user_agent="solar_time_calc", timeout=10)
            位置 = 地理定位器.geocode(地区)
            if not 位置:
                raise ValueError(f"无法找到地区: {地区}")

            纬度, 经度 = 位置.latitude, 位置.longitude
            self.经纬度 = (纬度, 经度)  # 更新类的经纬度属性

            # 计算真太阳时
            # 1. 计算与北京标准时区(东经120度)的经度差
            经度差 = 经度 - 120.0
            
            # 2. 计算地方时差（每1度经度差4分钟）
            地方时差分钟 = 经度差 * 4
            
            # 3. 计算日期对应的均时差(误差方程)
            # 使用简化的均时差计算公式
            年份 = 起局时.year
            月份 = 起局时.month
            日期 = 起局时.day
            
            # 计算当年的第几天
            一月一日 = datetime(年份, 1, 1)
            当前日期 = datetime(年份, 月份, 日期)
            年内天数 = (当前日期 - 一月一日).days + 1
            
            # 计算均时差（单位：分钟）
            # 使用简化的均时差计算公式：E = 9.87 * sin(2B) - 7.53 * cos(B) - 1.5 * sin(B)
            # 其中 B = 2π * (日期 - 81) / 364
            import math
            角度B = 2 * math.pi * (年内天数 - 81) / 364
            均时差分钟 = 9.87 * math.sin(2 * 角度B) - 7.53 * math.cos(角度B) - 1.5 * math.sin(角度B)
            
            # 4. 计算真太阳时 = 区时 + 地方时差 + 均时差
            总时差分钟 = 地方时差分钟 + 均时差分钟
            真太阳时间 = 起局时 + timedelta(minutes=总时差分钟)

            # 更新奇门遁甲数据
            self.奇门遁甲数据["起局信息"]["起局时间"] = 真太阳时间.strftime('%Y-%m-%d %H:%M:%S')
            self.奇门遁甲数据["起局信息"]["是否真太阳时"] = True
            self.奇门遁甲数据["起局信息"]["农历"] = self.计算农历(真太阳时间)
            self.奇门遁甲数据["起局信息"]["节气"] = self.计算节气(真太阳时间)

            return 纬度, 经度, 真太阳时间

        except Exception as e:
            print(f"计算真太阳时时发生错误: {str(e)}")
            # 发生错误时使用原始时间
            self.奇门遁甲数据["起局信息"]["起局时间"] = 起局时.strftime('%Y-%m-%d %H:%M:%S')
            self.经纬度 = None
            return None, None, 起局时

    def 计算农历(self, 时间):
        """
        计算农历日期
        :param 时间: datetime对象
        :return: 农历日期字符串，格式为 "五月初十 戌时"
        """
        try:
            import cnlunar
            农历 = cnlunar.Lunar(时间, godType='8char')
            
            # 获取农历月日（去掉"小"字）
            农历月 = 农历.lunarMonthCn
            if "小" in 农历月:
                农历月 = 农历月.replace("小", "")
            农历日 = 农历.lunarDayCn
            
            # 获取时辰
            时辰 = 农历.twohour8Char[1]  # 取地支作为时辰
            
            # 返回格式化的农历日期字符串（不含年份，添加时辰）
            return f"{农历月}{农历日} {时辰}时"
        except Exception as e:
            print(f"计算农历时发生错误: {str(e)}")
            # 返回简单格式的农历日期
            try:
                from lunar_python import Lunar
                农历 = Lunar.fromDate(时间)
                时辰地支 = ["子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥"]
                时辰索引 = (时间.hour + 1) // 2 % 12  # 计算时辰索引
                时辰 = 时辰地支[时辰索引]
                月名 = 农历.getMonthInChinese()
                if "小" in 月名:
                    月名 = 月名.replace("小", "")
                return f"{月名}月{农历.getDayInChinese()} {时辰}时"
            except Exception as e:
                print(f"使用lunar_python计算农历时发生错误: {str(e)}")
                # 如果两种方法都失败，返回原始日期
                时辰地支 = ["子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥"]
                时辰索引 = (时间.hour + 1) // 2 % 12  # 计算时辰索引
                时辰 = 时辰地支[时辰索引]
                return f"{时间.month}月{时间.day}日 {时辰}时"

# 测试代码
if __name__ == "__main__":
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M')
    print(f"当前时间: {current_time}")
    
    # 创建奇门遁甲对象，使用当前时间和地区
    try:
        qm = 奇门遁甲(起局时间=current_time, 起局法='拆补法', 地区='合浦县')
        
        # 计算四柱干支（使用cnlunar库）
        import cnlunar
        起局时间 = datetime.strptime(qm.奇门遁甲数据["起局信息"]["起局时间"], '%Y-%m-%d %H:%M:%S')
        农历 = cnlunar.Lunar(起局时间, godType='8char')
        
        # 正确设置四柱干支为数组格式
        年柱 = [农历.year8Char[0], 农历.year8Char[1]]
        月柱 = [农历.month8Char[0], 农历.month8Char[1]]
        日柱 = [农历.day8Char[0], 农历.day8Char[1]]
        时柱 = [农历.twohour8Char[0], 农历.twohour8Char[1]]
        qm.奇门遁甲数据["起局信息"]["四柱干支"] = [年柱, 月柱, 日柱, 时柱]
        
        # 打印结果
        latitude, longitude, true_solar_time = qm.真太阳时计算()
        print(f"经纬度: {longitude},{latitude}")
        print(f"真太阳时间: {true_solar_time}")
        print(f"奇门遁甲数据起局时间: {qm.奇门遁甲数据['起局信息']['起局时间']}")
        
        # 打印农历信息
        print(f"农历: {qm.奇门遁甲数据['起局信息']['农历']}")
        
        # 打印节气内容
        for 节气 in qm.奇门遁甲数据['起局信息']['节气']:
            print(f"节气: {节气['name']}, 日期: {节气['date']}")
        
        print(f"是否真太阳时: {qm.奇门遁甲数据['起局信息']['是否真太阳时']}")
        print(f"四柱干支: {qm.奇门遁甲数据['起局信息']['四柱干支']}")
        # 把整个奇门遁甲数据打印出来
        print(qm.奇门遁甲数据)
    
    except Exception as e:
        print(f"测试时发生错误: {str(e)}")
        import traceback
        traceback.print_exc()
        

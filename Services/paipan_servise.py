from datetime import datetime, timedelta, timezone
# from skyfield.api import load, wgs84
from geopy.geocoders import Nominatim
from lunar_python import Lunar  # 用于农历和节气计算
from nicegui import ui
import ephem

class 奇门遁甲:
    # 更易计算的十二长生表：天干 -> 地支 -> 长生状态（简化为一字）
    长生状态表 = {
        "甲": {"亥": "生", "子": "沐", "丑": "冠", "寅": "临", "卯": "旺", "辰": "衰", "巳": "病", "午": "死", "未": "墓", "申": "绝", "酉": "胎", "戌": "养"},
        "乙": {"午": "生", "巳": "沐", "辰": "冠", "卯": "临", "寅": "旺", "丑": "衰", "子": "病", "亥": "死", "戌": "墓", "酉": "绝", "申": "胎", "未": "养"},
        "丙": {"寅": "生", "卯": "沐", "辰": "冠", "巳": "临", "午": "旺", "未": "衰", "申": "病", "酉": "死", "戌": "墓", "亥": "绝", "子": "胎", "丑": "养"},
        "丁": {"酉": "生", "申": "沐", "未": "冠", "午": "临", "巳": "旺", "辰": "衰", "卯": "病", "寅": "死", "丑": "墓", "子": "绝", "亥": "胎", "戌": "养"},
        "戊": {"寅": "生", "卯": "沐", "辰": "冠", "巳": "临", "午": "旺", "未": "衰", "申": "病", "酉": "死", "戌": "墓", "亥": "绝", "子": "胎", "丑": "养"},
        "己": {"酉": "生", "申": "沐", "未": "冠", "午": "临", "巳": "旺", "辰": "衰", "卯": "病", "寅": "死", "丑": "墓", "子": "绝", "亥": "胎", "戌": "养"},
        "庚": {"巳": "生", "午": "沐", "未": "冠", "申": "临", "酉": "旺", "戌": "衰", "亥": "病", "子": "死", "丑": "墓", "寅": "绝", "卯": "胎", "辰": "养"},
        "辛": {"子": "生", "亥": "沐", "戌": "冠", "酉": "临", "申": "旺", "未": "衰", "午": "病", "巳": "死", "辰": "墓", "卯": "绝", "寅": "胎", "丑": "养"},
        "壬": {"申": "生", "酉": "沐", "戌": "冠", "亥": "临", "子": "旺", "丑": "衰", "寅": "病", "卯": "死", "辰": "墓", "巳": "绝", "午": "胎", "未": "养"},
        "癸": {"卯": "生", "寅": "沐", "丑": "冠", "子": "临", "亥": "旺", "戌": "衰", "酉": "病", "申": "死", "未": "墓", "午": "绝", "巳": "胎", "辰": "养"}
    }

    def __init__(self, container=None, 起局时间=None, 起局法='拆补法', 地区=None):
        """
        初始化奇门遁甲排盘类。

        :param container: NiceGUI容器元素（可选，默认为 None），用于 UI 渲染
        :param 起局时间: 起局时间，必须为字符串格式 'YYYY-MM-DD HH:MM'，不能为空
        :param 起局法: 起局方法，支持 '拆补法' 或 '置润法'，默认为 '拆补法'
        :param 地区: 地区名称（如城市名称），用于真太阳时计算，若为 None 则直接使用起局时间
        """
        # 处理起局时间：必须为字符串格式，解析为 datetime 对象
        if not isinstance(起局时间, str):
            raise TypeError("起局时间必须为字符串格式，例如 '2025-06-02 14:00'")
        try:
            self.起局时 = datetime.strptime(起局时间, '%Y-%m-%d %H:%M')
        except ValueError as e:
            raise ValueError(f"起局时间格式错误，应为 'YYYY-MM-DD HH:MM'，例如 '2025-06-02 14:00'，错误：{e}")

        # 确保起局时不带时区信息，以避免与不支持时区的库冲突
        if self.起局时.tzinfo is not None:
            self.起局时 = self.起局时.replace(tzinfo=None)

        self.container = container  # 存储 container，供 NiceGUI 使用，测试时可为 None
        self.地区 = 地区
        self.起局法 = 起局法
        self.经纬度 = None

        # 初始化奇门遁甲数据
        self.奇门遁甲数据 = {
            "起局信息": {
                "起局时间": None,
                "是否真太阳时": False,
                "农历": "",
                "节气": [],  # 初始化为空列表，避免后续引用错误
                "局数": "",
                "四柱干支": [["甲", "子"], ["乙", "丑"], ["丙", "寅"], ["丁", "卯"]],  # 设置默认的四柱干支数据
                "四柱纳音": ["海中金", "海中金", "炉中火", "炉中火"],
                "四柱旬空": ["戌亥空", "戌亥空", "戌亥空", "戌亥空"],
                "符头": "",
                "值符": "",
                "值使": "",
                "旬首": ""
            },
            "一宫": {
                "宫名": "坎", "方位": "正北", "宫数": "一", "宫支": ["子"],
                "宫属性": "水", "本位星": "天蓬", "本位门": "休门", "隐干": "",
                "地八神": "", "地盘干": "", "地盘干长生": [""], "寄地盘干": "", "寄地盘干长生": [""], "天盘干": "",
                "天盘干长生": [""], "天盘星": "", "天盘星旺衰": ["", ""],
                "天八神": "", "天八神旺衰": ["", ""], "天盘门": "", "天盘门旺衰": ["", ""],
                "马星": "", "空亡": [], "建除": "", "寄天盘干": "",
                "寄天盘干长生": [""], "寄宫星": "", "寄宫星旺衰": ["", ""],
                "格局": [],"四害": ""
            },
            "二宫": {
                "宫名": "坤", "方位": "西南", "宫数": "二", "宫支": ["未","申"],
                "宫属性": "土", "本位星": "天芮", "本位门": "死门", "隐干": "",
                "地八神": "", "地盘干": "", "地盘干长生": [""], "寄地盘干": "", "寄地盘干长生": [""], "天盘干": "",
                "天盘干长生": [""], "天盘星": "", "天盘星旺衰": ["", ""],
                "天八神": "", "天八神旺衰": ["", ""], "天盘门": "", "天盘门旺衰": ["", ""],
                "马星": "", "空亡": [], "建除": "", "寄天盘干": "",
                "寄天盘干长生": [""], "寄宫星": "", "寄宫星旺衰": ["", ""],
                "格局": [],"四害": ""
            },
            "三宫": {
                "宫名": "震", "方位": "正东", "宫数": "三", "宫支": ["卯"],
                "宫属性": "木", "本位星": "天冲", "本位门": "伤门", "隐干": "",
                "地八神": "", "地盘干": "", "地盘干长生": [""], "寄地盘干": "", "寄地盘干长生": [""], "天盘干": "",
                "天盘干长生": [""], "天盘星": "", "天盘星旺衰": ["", ""],
                "天八神": "", "天八神旺衰": ["", ""], "天盘门": "", "天盘门旺衰": ["", ""],
                "马星": "", "空亡": [], "建除": "", "寄天盘干": "",
                "寄天盘干长生": [""], "寄宫星": "", "寄宫星旺衰": ["", ""],
                "格局": [],"四害": ""
            },
            "四宫": {
               "宫名": "巽", "方位": "东南", "宫数": "四", "宫支": ["巳","辰"],
                "宫属性": "木", "本位星": "天辅", "本位门": "杜门", "隐干": "",
                "地八神": "", "地盘干": "", "地盘干长生": [""], "寄地盘干": "", "寄地盘干长生": [""], "天盘干": "",
                "天盘干长生": [""], "天盘星": "", "天盘星旺衰": ["", ""],
                "天八神": "", "天八神旺衰": ["", ""], "天盘门": "", "天盘门旺衰": ["", ""],
                "马星": "", "空亡": [], "建除": "", "寄天盘干": "",
                "寄天盘干长生": [""], "寄宫星": "", "寄宫星旺衰": ["", ""],
                "格局": [],"四害": ""
            },
            "五宫": {
                "宫名": "", "方位": "中", "宫数": "五", "宫支": [""],
                "宫属性": "土", "本位星": "天禽", "隐干": "",
                "地八神": "", "地盘干": "", "地盘干长生": [""], "寄地盘干": "", "寄地盘干长生": [""], "天盘干": ""
            },
            "六宫": {
                "宫名": "乾", "方位": "西北", "宫数": "六", "宫支": ["戌","亥"],
                "宫属性": "金", "本位星": "天心", "本位门": "开门", "隐干": "",
                "地八神": "", "地盘干": "", "地盘干长生": [""], "寄地盘干": "", "寄地盘干长生": [""], "天盘干": "",
                "天盘干长生": [""], "天盘星": "", "天盘星旺衰": ["", ""],
                "天八神": "", "天八神旺衰": ["", ""], "天盘门": "", "天盘门旺衰": ["", ""],
                "马星": "", "空亡": [], "建除": "", "寄天盘干": "",
                "寄天盘干长生": [""], "寄宫星": "", "寄宫星旺衰": ["", ""],
                "格局": [],"四害": ""
            },
            "七宫": {
                "宫名": "兑", "方位": "正西", "宫数": "七", "宫支": ["酉"],
                "宫属性": "金", "本位星": "天柱", "本位门": "惊门", "隐干": "",
                "地八神": "", "地盘干": "", "地盘干长生": [""], "寄地盘干": "", "寄地盘干长生": [""], "天盘干": "",
                "天盘干长生": [""], "天盘星": "", "天盘星旺衰": ["", ""],
                "天八神": "", "天八神旺衰": ["", ""], "天盘门": "", "天盘门旺衰": ["", ""],
                "马星": "", "空亡": [], "建除": "", "寄天盘干": "",
                "寄天盘干长生": [""], "寄宫星": "", "寄宫星旺衰": ["", ""],
                "格局": [],"四害": ""
            },
            "八宫": {
                "宫名": "艮", "方位": "东北", "宫数": "八", "宫支": ["寅","丑"],
                "宫属性": "土", "本位星": "天任", "本位门": "生门", "隐干": "",
                "地八神": "", "地盘干": "", "地盘干长生": [""], "寄地盘干": "", "寄地盘干长生": [""], "天盘干": "",
                "天盘干长生": [""], "天盘星": "", "天盘星旺衰": ["", ""],
                "天八神": "", "天八神旺衰": ["", ""], "天盘门": "", "天盘门旺衰": ["", ""],
                "马星": "", "空亡": [], "建除": "", "寄天盘干": "",
                "寄天盘干长生": [""], "寄宫星": "", "寄宫星旺衰": ["", ""],
                "格局": [],"四害": ""
            },
            "九宫": {
                "宫名": "离", "方位": "正南", "宫数": "九", "宫支": ["午"],
                "宫属性": "火", "本位星": "天英", "本位门": "景门", "隐干": "",
                "地八神": "", "地盘干": "", "地盘干长生": [""], "寄地盘干": "", "寄地盘干长生": [""], "天盘干": "",
                "天盘干长生": [""], "天盘星": "", "天盘星旺衰": ["", ""],
                "天八神": "", "天八神旺衰": ["", ""], "天盘门": "", "天盘门旺衰": ["", ""],
                "马星": "", "空亡": [], "建除": "", "寄天盘干": "",
                "寄天盘干长生": [""], "寄宫星": "", "寄宫星旺衰": ["", ""],
                "格局": [],"四害": ""
            }
        }

        # 根据是否提供地区来决定使用真太阳时或直接使用起局时间
        if self.地区:
            # 如果提供了地区，计算真太阳时
            latitude, longitude, true_solar_time = self.真太阳时计算()
            self.奇门遁甲数据["起局信息"]["起局时间"] = true_solar_time.strftime('%Y-%m-%d %H:%M:%S')
            self.奇门遁甲数据["起局信息"]["是否真太阳时"] = True
            self.奇门遁甲数据["起局信息"]["农历"] = self.计算农历(true_solar_time)
            self.奇门遁甲数据["起局信息"]["节气"] = self.计算节气(true_solar_time)
            
            # 计算四柱干支
            self.计算四柱干支(true_solar_time)
        else:
            # 如果没有提供地区，直接使用起局时间
            self.奇门遁甲数据["起局信息"]["起局时间"] = self.起局时.strftime('%Y-%m-%d %H:%M:%S')
            self.奇门遁甲数据["起局信息"]["是否真太阳时"] = False
            self.奇门遁甲数据["起局信息"]["农历"] = self.计算农历(self.起局时)
            self.奇门遁甲数据["起局信息"]["节气"] = self.计算节气(self.起局时)
            
            # 计算四柱干支
            self.计算四柱干支(self.起局时)
            
        # 初始化完成后，计算符头和局数
        self.计算符头()
        
        # 执行完整排盘
        self.排盘()

    def 计算节气(self, 时间):
        """
        计算当前节气和下一个节气，返回节气列表
        :param 时间: datetime对象
        :return: 节气列表，格式为 [{"name": "节气名", "date": "日期"}, {"name": "节气名", "date": "日期"}]
        """
        from datetime import datetime, timedelta
        from lunar_python import Solar, JieQi, Lunar
        
        # 将输入时间转换为Lunar对象
        lunar = Lunar.fromDate(时间)
        
        # 获取上一个节气
        上一节气 = lunar.getPrevJieQi()
        上一节气名称 = 上一节气.getName()
        
        # 通过JieQi获取节气对应的阳历日期
        上一节气阳历 = 上一节气.getSolar()
        上一节气年 = 上一节气阳历.getYear()
        上一节气月 = 上一节气阳历.getMonth()
        上一节气日 = 上一节气阳历.getDay()
        上一节气时 = 上一节气阳历.getHour()
        上一节气分 = 上一节气阳历.getMinute()
        上一节气日期 = datetime(上一节气年, 上一节气月, 上一节气日, 上一节气时, 上一节气分)
        
        # 获取下一个节气
        下一节气 = lunar.getNextJieQi()
        下一节气名称 = 下一节气.getName()
        
        # 通过JieQi获取节气对应的阳历日期
        下一节气阳历 = 下一节气.getSolar()
        下一节气年 = 下一节气阳历.getYear()
        下一节气月 = 下一节气阳历.getMonth()
        下一节气日 = 下一节气阳历.getDay()
        下一节气时 = 下一节气阳历.getHour()
        下一节气分 = 下一节气阳历.getMinute()
        下一节气日期 = datetime(下一节气年, 下一节气月, 下一节气日, 下一节气时, 下一节气分)
        
        # 创建节气列表，修改日期格式为"MM-DD HH:MM"
        节气列表 = [
            {
                "name": 上一节气名称,
                "date": 上一节气日期.strftime('%m-%d %H:%M')
            },
            {
                "name": 下一节气名称,
                "date": 下一节气日期.strftime('%m-%d %H:%M')
            }
        ]
        
        return 节气列表

    def 真太阳时计算(self):
        """
        计算真太阳时，返回纬度、经度和真太阳时间，并更新奇门遁甲数据的起局时间。
        如果地区为 None，直接使用起局时间。
        """
        起局时 = self.起局时
        地区 = self.地区

        # 确保起局时是 datetime 类型
        if isinstance(起局时, str):
            try:
                起局时 = datetime.strptime(起局时, '%Y-%m-%d %H:%M')
            except ValueError as e:
                raise ValueError(f"起局时间格式错误，应为 'YYYY-MM-DD HH:MM'，例如 '2025-06-02 14:00'，错误：{e}")

        # 移除时区信息，避免与不支持时区的库冲突
        if 起局时.tzinfo is not None:
            起局时 = 起局时.replace(tzinfo=None)

        # 如果没有提供地区，返回 None 作为纬度和经度
        if not 地区:
            self.奇门遁甲数据["起局信息"]["起局时间"] = 起局时.strftime('%Y-%m-%d %H:%M:%S')
            self.经纬度 = None
            
            # 计算节气信息
            self.奇门遁甲数据["起局信息"]["节气"] = self.计算节气(起局时)
            return None, None, 起局时

        try:
            # 使用 geopy 获取经纬度，增加超时设置
            地理定位器 = Nominatim(user_agent="solar_time_calc", timeout=10)
            位置 = 地理定位器.geocode(地区)
            if not 位置:
                raise ValueError(f"无法找到地区: {地区}")

            纬度, 经度 = 位置.latitude, 位置.longitude
            self.经纬度 = (纬度, 经度)  # 更新类的经纬度属性

            # 计算真太阳时
            # 1. 计算与北京标准时区(东经120度)的经度差
            经度差 = 经度 - 120.0
            
            # 2. 计算地方时差（每1度经度差4分钟）
            地方时差分钟 = 经度差 * 4
            
            # 3. 计算日期对应的均时差(误差方程)
            # 使用简化的均时差计算公式
            年份 = 起局时.year
            月份 = 起局时.month
            日期 = 起局时.day
            
            # 计算当年的第几天
            一月一日 = datetime(年份, 1, 1)
            当前日期 = datetime(年份, 月份, 日期)
            年内天数 = (当前日期 - 一月一日).days + 1
            
            # 计算均时差（单位：分钟）
            # 使用简化的均时差计算公式：E = 9.87 * sin(2B) - 7.53 * cos(B) - 1.5 * sin(B)
            # 其中 B = 2π * (日期 - 81) / 364
            import math
            角度B = 2 * math.pi * (年内天数 - 81) / 364
            均时差分钟 = 9.87 * math.sin(2 * 角度B) - 7.53 * math.cos(角度B) - 1.5 * math.sin(角度B)
            
            # 4. 计算真太阳时 = 区时 + 地方时差 + 均时差
            总时差分钟 = 地方时差分钟 + 均时差分钟
            真太阳时间 = 起局时 + timedelta(minutes=总时差分钟)

            # 更新奇门遁甲数据
            self.奇门遁甲数据["起局信息"]["起局时间"] = 真太阳时间.strftime('%Y-%m-%d %H:%M:%S')
            self.奇门遁甲数据["起局信息"]["是否真太阳时"] = True
            self.奇门遁甲数据["起局信息"]["农历"] = self.计算农历(真太阳时间)
            self.奇门遁甲数据["起局信息"]["节气"] = self.计算节气(真太阳时间)

            return 纬度, 经度, 真太阳时间

        except Exception as e:
            print(f"计算真太阳时时发生错误: {str(e)}")
            # 发生错误时使用原始时间
            self.奇门遁甲数据["起局信息"]["起局时间"] = 起局时.strftime('%Y-%m-%d %H:%M:%S')
            self.经纬度 = None
            return None, None, 起局时

    def 计算农历(self, 时间):
        """
        计算农历日期
        :param 时间: datetime对象
        :return: 农历日期字符串，格式为 "五月初十 戌时"
        """
        try:
            import cnlunar
            农历 = cnlunar.Lunar(时间, godType='8char')
            
            # 获取农历月日（去掉"小"字）
            农历月 = 农历.lunarMonthCn
            if "小" in 农历月:
                农历月 = 农历月.replace("小", "")
            农历日 = 农历.lunarDayCn
            
            # 获取时辰
            时辰 = 农历.twohour8Char[1]  # 取地支作为时辰
            
            # 返回格式化的农历日期字符串（不含年份，添加时辰）
            return f"{农历月}{农历日} {时辰}时"
        except Exception as e:
            print(f"计算农历时发生错误: {str(e)}")
            # 返回简单格式的农历日期
            try:
                from lunar_python import Lunar
                农历 = Lunar.fromDate(时间)
                时辰地支 = ["子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥"]
                时辰索引 = (时间.hour + 1) // 2 % 12  # 计算时辰索引
                时辰 = 时辰地支[时辰索引]
                月名 = 农历.getMonthInChinese()
                if "小" in 月名:
                    月名 = 月名.replace("小", "")
                return f"{月名}月{农历.getDayInChinese()} {时辰}时"
            except Exception as e:
                print(f"使用lunar_python计算农历时发生错误: {str(e)}")
                # 如果两种方法都失败，返回原始日期
                时辰地支 = ["子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥"]
                时辰索引 = (时间.hour + 1) // 2 % 12  # 计算时辰索引
                时辰 = 时辰地支[时辰索引]
                return f"{时间.month}月{时间.day}日 {时辰}时"

    def 计算四柱干支(self, 时间):
        """
        计算四柱干支、四柱纳音、四柱旬空并更新奇门遁甲数据
        :param 时间: datetime对象
        """
        try:
            import cnlunar
            农历 = cnlunar.Lunar(时间, godType='8char')
            
            # 设置四柱干支为数组格式
            年柱 = [农历.year8Char[0], 农历.year8Char[1]]
            月柱 = [农历.month8Char[0], 农历.month8Char[1]]
            日柱 = [农历.day8Char[0], 农历.day8Char[1]]
            时柱 = [农历.twohour8Char[0], 农历.twohour8Char[1]]
            self.奇门遁甲数据["起局信息"]["四柱干支"] = [年柱, 月柱, 日柱, 时柱]
            
            # 计算四柱纳音
            纳音表 = {
                "甲子": "海中金", "乙丑": "海中金", "丙寅": "炉中火", "丁卯": "炉中火",
                "戊辰": "大林木", "己巳": "大林木", "庚午": "路旁土", "辛未": "路旁土",
                "壬申": "剑锋金", "癸酉": "剑锋金", "甲戌": "山头火", "乙亥": "山头火",
                "丙子": "涧下水", "丁丑": "涧下水", "戊寅": "城头土", "己卯": "城头土",
                "庚辰": "白蜡金", "辛巳": "白蜡金", "壬午": "杨柳木", "癸未": "杨柳木",
                "甲申": "泉中水", "乙酉": "泉中水", "丙戌": "屋上土", "丁亥": "屋上土",
                "戊子": "霹雳火", "己丑": "霹雳火", "庚寅": "松柏木", "辛卯": "松柏木",
                "壬辰": "长流水", "癸巳": "长流水", "甲午": "沙中金", "乙未": "沙中金",
                "丙申": "山下火", "丁酉": "山下火", "戊戌": "平地木", "己亥": "平地木",
                "庚子": "壁上土", "辛丑": "壁上土", "壬寅": "金箔金", "癸卯": "金箔金",
                "甲辰": "覆灯火", "乙巳": "覆灯火", "丙午": "天河水", "丁未": "天河水",
                "戊申": "大驿土", "己酉": "大驿土", "庚戌": "钗环金", "辛亥": "钗环金",
                "壬子": "桑柘木", "癸丑": "桑柘木", "甲寅": "大溪水", "乙卯": "大溪水",
                "丙辰": "沙中土", "丁巳": "沙中土", "戊午": "天上火", "己未": "天上火",
                "庚申": "石榴木", "辛酉": "石榴木", "壬戌": "大海水", "癸亥": "大海水"
            }
            
            年柱纳音 = 纳音表.get(年柱[0] + 年柱[1], "未知")
            月柱纳音 = 纳音表.get(月柱[0] + 月柱[1], "未知")
            日柱纳音 = 纳音表.get(日柱[0] + 日柱[1], "未知")
            时柱纳音 = 纳音表.get(时柱[0] + 时柱[1], "未知")
            self.奇门遁甲数据["起局信息"]["四柱纳音"] = [年柱纳音, 月柱纳音, 日柱纳音, 时柱纳音]
            
            # 计算四柱旬空 - 使用旬空表而不是计算
            旬空表 = {
                "甲子": "戌亥空", "乙丑": "戌亥空", "丙寅": "戌亥空", "丁卯": "戌亥空", "戊辰": "戌亥空", 
                "己巳": "戌亥空", "庚午": "戌亥空", "辛未": "戌亥空", "壬申": "戌亥空", "癸酉": "戌亥空",
                
                "甲戌": "申酉空", "乙亥": "申酉空", "丙子": "申酉空", "丁丑": "申酉空", "戊寅": "申酉空", 
                "己卯": "申酉空", "庚辰": "申酉空", "辛巳": "申酉空", "壬午": "申酉空", "癸未": "申酉空",
                
                "甲申": "午未空", "乙酉": "午未空", "丙戌": "午未空", "丁亥": "午未空", "戊子": "午未空", 
                "己丑": "午未空", "庚寅": "午未空", "辛卯": "午未空", "壬辰": "午未空", "癸巳": "午未空",
                
                "甲午": "辰巳空", "乙未": "辰巳空", "丙申": "辰巳空", "丁酉": "辰巳空", "戊戌": "辰巳空", 
                "己亥": "辰巳空", "庚子": "辰巳空", "辛丑": "辰巳空", "壬寅": "辰巳空", "癸卯": "辰巳空",
                
                "甲辰": "寅卯空", "乙巳": "寅卯空", "丙午": "寅卯空", "丁未": "寅卯空", "戊申": "寅卯空", 
                "己酉": "寅卯空", "庚戌": "寅卯空", "辛亥": "寅卯空", "壬子": "寅卯空", "癸丑": "寅卯空",
                
                "甲寅": "子丑空", "乙卯": "子丑空", "丙辰": "子丑空", "丁巳": "子丑空", "戊午": "子丑空", 
                "己未": "子丑空", "庚申": "子丑空", "辛酉": "子丑空", "壬戌": "子丑空", "癸亥": "子丑空"
            }
            
            年柱旬空 = 旬空表.get(年柱[0] + 年柱[1], "未知")
            月柱旬空 = 旬空表.get(月柱[0] + 月柱[1], "未知")
            日柱旬空 = 旬空表.get(日柱[0] + 日柱[1], "未知")
            时柱旬空 = 旬空表.get(时柱[0] + 时柱[1], "未知")
            self.奇门遁甲数据["起局信息"]["四柱旬空"] = [年柱旬空, 月柱旬空, 日柱旬空, 时柱旬空]
            
            return True
        except Exception as e:
            print(f"计算四柱干支时发生错误: {str(e)}")
            # 设置默认四柱干支
            self.奇门遁甲数据["起局信息"]["四柱干支"] = [
                ["甲", "子"], ["乙", "丑"], ["丙", "寅"], ["丁", "卯"]
            ]
            # 设置默认四柱纳音
            self.奇门遁甲数据["起局信息"]["四柱纳音"] = ["海中金", "海中金", "炉中火", "炉中火"]
            # 设置默认四柱旬空
            self.奇门遁甲数据["起局信息"]["四柱旬空"] = ["戌亥空", "戌亥空", "戌亥空", "戌亥空"]
            return False

    def 计算符头(self):
        """
        计算符头：找到日柱前面最近的甲日或己日作为符头
        并根据符头地支和节气确定局数
        """
        try:
            # 获取日柱干支
            日柱 = self.奇门遁甲数据["起局信息"]["四柱干支"][2]
            日干 = 日柱[0]
            日支 = 日柱[1]
            日柱组合 = 日干 + 日支
            
            # 六十甲子表
            六十甲子 = [
                "甲子", "乙丑", "丙寅", "丁卯", "戊辰", "己巳", "庚午", "辛未", "壬申", "癸酉",
                "甲戌", "乙亥", "丙子", "丁丑", "戊寅", "己卯", "庚辰", "辛巳", "壬午", "癸未",
                "甲申", "乙酉", "丙戌", "丁亥", "戊子", "己丑", "庚寅", "辛卯", "壬辰", "癸巳",
                "甲午", "乙未", "丙申", "丁酉", "戊戌", "己亥", "庚子", "辛丑", "壬寅", "癸卯",
                "甲辰", "乙巳", "丙午", "丁未", "戊申", "己酉", "庚戌", "辛亥", "壬子", "癸丑",
                "甲寅", "乙卯", "丙辰", "丁巳", "戊午", "己未", "庚申", "辛酉", "壬戌", "癸亥"
            ]
            
            # 找到日柱在六十甲子中的索引
            if 日柱组合 in 六十甲子:
                日柱索引 = 六十甲子.index(日柱组合)
            else:
                print(f"警告：无法在六十甲子中找到日柱 {日柱组合}，使用默认符头甲子")
                self.奇门遁甲数据["起局信息"]["符头"] = "甲子"
                return "甲子"
            
            # 从日柱往前查找，找到最近的甲日或己日
            符头索引 = 日柱索引
            while True:
                符头索引 = (符头索引 - 1) % 60  # 往前一位，循环查找
                当前干支 = 六十甲子[符头索引]
                当前干 = 当前干支[0]
                
                if 当前干 == "甲" or 当前干 == "己":
                    符头 = 当前干支
                    break
                
                # 避免无限循环
                if 符头索引 == 日柱索引:
                    符头 = "甲子"  # 默认符头
                    print("警告：无法找到合适的符头，使用默认符头甲子")
                    break
            
            # 更新奇门遁甲数据
            self.奇门遁甲数据["起局信息"]["符头"] = 符头
            
            # 根据符头地支确定元
            符头地支 = 符头[1]
            
            # 确定元
            上元地支 = ["子", "卯", "午", "酉"]
            中元地支 = ["寅", "巳", "申", "亥"]
            下元地支 = ["辰", "未", "戌", "丑"]
            
            if 符头地支 in 上元地支:
                元 = "上元"
                元索引 = 0
            elif 符头地支 in 中元地支:
                元 = "中元"
                元索引 = 1
            elif 符头地支 in 下元地支:
                元 = "下元"
                元索引 = 2
            else:
                元 = "上元"  # 默认上元
                元索引 = 0
            
            # 获取当前节气
            节气列表 = self.奇门遁甲数据["起局信息"]["节气"]
            if not 节气列表:
                print("警告：节气信息为空，无法准确确定局数，使用默认局数")
                self.奇门遁甲数据["起局信息"]["局数"] = "阳九局"
                return 符头
            
            当前节气 = 节气列表[0]["name"]
            
            # 节气局数表 - 每个节气对应三个数字，分别是上元、中元、下元的局数
            节气局数表 = {
                "阳遁": {
                    "冬至": ["1", "7", "4"],
                    "小寒": ["2", "8", "5"],
                    "大寒": ["3", "9", "6"],
                    "立春": ["8", "5", "2"],
                    "雨水": ["9", "6", "3"],
                    "惊蛰": ["1", "7", "4"],
                    "春分": ["3", "9", "6"],
                    "清明": ["4", "1", "7"],
                    "谷雨": ["5", "2", "8"],
                    "立夏": ["4", "1", "7"],
                    "小满": ["5", "2", "8"],
                    "芒种": ["6", "3", "9"]
                },
                "阴遁": {
                    "夏至": ["9", "3", "6"],
                    "小暑": ["8", "2", "5"],
                    "大暑": ["7", "1", "4"],
                    "立秋": ["2", "5", "8"],
                    "处暑": ["1", "4", "7"],
                    "白露": ["9", "3", "6"],
                    "秋分": ["7", "1", "4"],
                    "寒露": ["6", "9", "3"],
                    "霜降": ["5", "8", "2"],
                    "立冬": ["6", "9", "3"],
                    "小雪": ["5", "8", "2"],
                    "大雪": ["4", "7", "1"]
                }
            }
            
            # 阳遁节气和阴遁节气
            阳遁节气 = ["冬至", "小寒", "大寒", "立春", "雨水", "惊蛰", "春分", "清明", "谷雨", "立夏", "小满", "芒种"]
            阴遁节气 = ["夏至", "小暑", "大暑", "立秋", "处暑", "白露", "秋分", "寒露", "霜降", "立冬", "小雪", "大雪"]
            
            # 确定遁
            遁 = "阳遁" if 当前节气 in 阳遁节气 else "阴遁"
            
            # 查询局数
            if 当前节气 in 节气局数表[遁]:
                # 根据元索引获取对应的局数
                局数值 = 节气局数表[遁][当前节气][元索引]
            else:
                print(f"警告：无法确定局数，使用默认局数")
                self.奇门遁甲数据["起局信息"]["局数"] = "阳九局"
                return 符头
            
            # 确定最终局数
            局数 = f"{遁}{局数值}局"
            
            # 更新奇门遁甲数据
            self.奇门遁甲数据["起局信息"]["局数"] = 局数
            
            return 符头
            
        except Exception as e:
            print(f"计算符头时发生错误: {str(e)}")
            self.奇门遁甲数据["起局信息"]["符头"] = "甲子"
            self.奇门遁甲数据["起局信息"]["局数"] = "阳九局"
            return "甲子"
            
    def 排地盘干(self):
        """
        根据局数排列地盘干
        阳顺：戊(九宫)，己(八宫)，庚(七宫)，辛(六宫)，壬(五宫)，癸(四宫)，丁(三宫)，丙(二宫)，乙(一宫)
        阴逆：戊(一宫)，己(二宫)，庚(三宫)，辛(四宫)，壬(五宫)，癸(六宫)，丁(七宫)，丙(八宫)，乙(九宫)
        """
        # 获取局数信息
        局数信息 = self.奇门遁甲数据["起局信息"]["局数"]
        if not 局数信息:
            print("警告：局数信息为空，无法排地盘干")
            return False
            
        # 解析局数信息
        try:
            遁 = "阳遁" if "阳" in 局数信息 else "阴遁"
            局数 = int(局数信息.replace("阳遁", "").replace("阴遁", "").replace("局", ""))
        except Exception as e:
            print(f"解析局数信息失败: {e}")
            return False
            
        # 检查奇门遁甲数据中的宫位键
            
        # 天干序列，固定顺序
        天干序列 = ["戊", "己", "庚", "辛", "壬", "癸", "丁", "丙", "乙"]
        
        # 宫位序列
        宫位序列 = ["一", "二", "三", "四", "五", "六", "七", "八", "九"]
        
        # 根据阴阳遁确定排序方向
        if 遁 == "阳遁":
            # 阳遁顺排，从局数对应的宫位开始
            起始宫位索引 = 局数 - 1  # 索引从0开始，所以减1
            地盘干分布 = {}
            for i in range(9):
                宫位索引 = (起始宫位索引 + i) % 9
                宫位 = 宫位序列[宫位索引]
                地盘干 = 天干序列[i]
                宫位键 = f"{宫位}宫"
                地盘干分布[宫位键] = 地盘干
        else:
            # 阴遁逆排，从局数对应的宫位开始
            起始宫位索引 = 局数 - 1  # 索引从0开始，所以减1
            地盘干分布 = {}
            for i in range(9):
                宫位索引 = (起始宫位索引 - i) % 9
                宫位 = 宫位序列[宫位索引]
                地盘干 = 天干序列[i]
                宫位键 = f"{宫位}宫"
                地盘干分布[宫位键] = 地盘干
        
        # 更新奇门遁甲数据中的地盘干
        for 宫位键, 地盘干 in 地盘干分布.items():
            if 宫位键 in self.奇门遁甲数据:
                self.奇门遁甲数据[宫位键]["地盘干"] = 地盘干
            else:
                print(f"[DEBUG] 排地盘干 - 警告: {宫位键} 不在奇门遁甲数据中")
        
        # 计算地盘干长生
        for 宫位键 in ["一宫", "二宫", "三宫", "四宫", "五宫", "六宫", "七宫", "八宫", "九宫"]:
            if 宫位键 in self.奇门遁甲数据:
                宫位数据 = self.奇门遁甲数据[宫位键]
                地盘干 = 宫位数据.get("地盘干", "")
                宫支列表 = 宫位数据.get("宫支", [])
                长生列表 = []
                for 宫支 in 宫支列表:
                    if 地盘干 and 宫支:
                        长生状态 = self.长生状态表.get(地盘干, {}).get(宫支, "")
                        长生列表.append(长生状态)
                    else:
                        长生列表.append("")
                宫位数据["地盘干长生"] = 长生列表
                
                # 计算寄地盘干长生
                寄地盘干 = 宫位数据.get("寄地盘干", "")
                寄长生列表 = []
                for 宫支 in 宫支列表:
                    if 寄地盘干 and 宫支:
                        寄长生状态 = self.长生状态表.get(寄地盘干, {}).get(宫支, "")
                        寄长生列表.append(寄长生状态)
                    else:
                        寄长生列表.append("")
                宫位数据["寄地盘干长生"] = 寄长生列表
        
        # 将五宫的地盘干复制到二宫的寄地盘干
        if "五宫" in self.奇门遁甲数据 and "二宫" in self.奇门遁甲数据:
            五宫地盘干 = self.奇门遁甲数据["五宫"].get("地盘干", "")
            if 五宫地盘干:
                self.奇门遁甲数据["二宫"]["寄地盘干"] = 五宫地盘干
                print(f"已将五宫地盘干 {五宫地盘干} 复制到二宫的寄地盘干")
                
                # 更新二宫寄地盘干长生
                二宫宫支列表 = self.奇门遁甲数据["二宫"].get("宫支", [])
                二宫寄长生列表 = []
                for 宫支 in 二宫宫支列表:
                    if 五宫地盘干 and 宫支:
                        寄长生状态 = self.长生状态表.get(五宫地盘干, {}).get(宫支, "")
                        二宫寄长生列表.append(寄长生状态)
                    else:
                        二宫寄长生列表.append("")
                self.奇门遁甲数据["二宫"]["寄地盘干长生"] = 二宫寄长生列表
        
        return True

    def 计算旬首(self):
        """
        通过时柱查找旬首（每10个为一组，直接取组首），并补上对应天干
        """
        时柱 = self.奇门遁甲数据["起局信息"]["四柱干支"][3]
        时干 = 时柱[0]
        时支 = 时柱[1]
        时柱组合 = 时干 + 时支
        
        # 六十甲子表
        六十甲子 = [
            "甲子", "乙丑", "丙寅", "丁卯", "戊辰", "己巳", "庚午", "辛未", "壬申", "癸酉",
            "甲戌", "乙亥", "丙子", "丁丑", "戊寅", "己卯", "庚辰", "辛巳", "壬午", "癸未",
            "甲申", "乙酉", "丙戌", "丁亥", "戊子", "己丑", "庚寅", "辛卯", "壬辰", "癸巳",
            "甲午", "乙未", "丙申", "丁酉", "戊戌", "己亥", "庚子", "辛丑", "壬寅", "癸卯",
            "甲辰", "乙巳", "丙午", "丁未", "戊申", "己酉", "庚戌", "辛亥", "壬子", "癸丑",
            "甲寅", "乙卯", "丙辰", "丁巳", "戊午", "己未", "庚申", "辛酉", "壬戌", "癸亥"
        ]
        
        if 时柱组合 in 六十甲子:
            idx = 六十甲子.index(时柱组合)
            旬首 = 六十甲子[(idx // 10) * 10]
        else:
            print("警告：无法在六十甲子中找到时柱，使用默认旬首甲子")
            旬首 = "甲子"
        
        # 更新奇门遁甲数据
        self.奇门遁甲数据["起局信息"]["旬首"] = 旬首
        
        # 根据旬首补上对应的天干
        旬首对应天干 = {
            "甲子": "戊",
            "甲戌": "己",
            "甲申": "庚",
            "甲午": "辛",
            "甲辰": "壬",
            "甲寅": "癸"
        }
        if 旬首 in 旬首对应天干:
            补上天干 = 旬首对应天干[旬首]
            self.奇门遁甲数据["起局信息"]["旬首"] = f"{旬首}{补上天干}"
        return

    def 排天盘干(self):
        """
        排列天盘干的方法
        1. 复制地盘干的顺序组合
        2. 取旬首值的最后一个字（值符天干A）
        3. 取时柱的天干（B）
        4. 在地盘干中找到B所在的宫位
        5. 将A放到B所在宫位的天盘干位置
        6. 按照"92761834"环形顺序旋转天盘
        
        特殊情况：
        - 当时柱天干位于五宫时，将值符天干放在二宫位置
        - 当值符天干位于五宫时，将其放在二宫位置
        然后按正常逻辑排列
        
        注意：五宫（中宫）不参与天盘干排布，只有地盘干
        """
        # 获取必要的数据
        旬首 = self.奇门遁甲数据["起局信息"]["旬首"]
        if not 旬首 or len(旬首) < 3:
            print("警告：旬首数据不完整，无法排天盘干")
            return False
            
        # 获取值符天干（A）- 旬首的最后一个字
        值符天干 = 旬首[-1]
        
        # 获取时柱天干（B）
        时柱 = self.奇门遁甲数据["起局信息"]["四柱干支"][3]
        时柱天干 = 时柱[0]
        
        # 奇门九宫顺序："92761834"（按圈排列）
        奇门九宫顺序 = ["九宫", "二宫", "七宫", "六宫", "一宫", "八宫", "三宫", "四宫"]
        
        # 复制地盘干的顺序组合
        地盘干分布 = {}
        寄地盘干分布 = {}  # 新增：用于跟踪寄地盘干
        for 宫位键 in ["一宫", "二宫", "三宫", "四宫", "五宫", "六宫", "七宫", "八宫", "九宫"]:
            if 宫位键 in self.奇门遁甲数据:
                地盘干 = self.奇门遁甲数据[宫位键].get("地盘干", "")
                地盘干分布[宫位键] = 地盘干
                
                # 新增：记录寄地盘干
                寄地盘干 = self.奇门遁甲数据[宫位键].get("寄地盘干", "")
                寄地盘干分布[宫位键] = 寄地盘干
        
        # 找到时柱天干（B）在地盘干中的宫位
        时柱天干宫位 = None
        for 宫位键, 地盘干 in 地盘干分布.items():
            if 地盘干 == 时柱天干:
                时柱天干宫位 = 宫位键
                break
                
        if not 时柱天干宫位:
            print(f"警告：找不到时柱天干 {时柱天干} 在地盘干中的宫位")
            return False
            
        # 找到值符天干（A）在地盘干中的宫位
        值符天干宫位 = None
        for 宫位键, 地盘干 in 地盘干分布.items():
            if 地盘干 == 值符天干:
                值符天干宫位 = 宫位键
                break
                
        if not 值符天干宫位:
            print(f"警告：找不到值符天干 {值符天干} 在地盘干中的宫位")
            return False
        
        # 特殊情况处理：当时干或值符天干在五宫时
        if 时柱天干宫位 == "五宫":
            print(f"检测到时干在五宫的特殊情况，将值符星放在二宫")
            时柱天干宫位 = "二宫"  # 时干在五宫时，使用二宫作为时干宫位
            
        if 值符天干宫位 == "五宫":
            print(f"检测到值符天干在五宫的特殊情况，将值符天干宫位设为二宫")
            值符天干宫位 = "二宫"  # 五宫值符特殊处理，将值符天干宫位设为二宫
        
        # 计算需要旋转的步数（A到B）
        if 值符天干宫位 in 奇门九宫顺序 and 时柱天干宫位 in 奇门九宫顺序:
            值符天干索引 = 奇门九宫顺序.index(值符天干宫位)
            时柱天干索引 = 奇门九宫顺序.index(时柱天干宫位)
            旋转步数 = (时柱天干索引 - 值符天干索引) % len(奇门九宫顺序)
        else:
            print(f"警告：值符天干宫位 {值符天干宫位} 或时柱天干宫位 {时柱天干宫位} 不在奇门九宫顺序中")
            return False
            
        # 按照"92761834"顺序旋转天盘
        天盘干分布 = {}
        寄天盘干分布 = {}  # 新增：用于跟踪寄天盘干的旋转
        for i, 宫位键 in enumerate(奇门九宫顺序):
            原宫位索引 = (i - 旋转步数) % len(奇门九宫顺序)
            原宫位键 = 奇门九宫顺序[原宫位索引]
            
            if 原宫位键 in 地盘干分布:
                天盘干 = 地盘干分布[原宫位键]
                天盘干分布[宫位键] = 天盘干
                
                # 新增：同时旋转寄地盘干到寄天盘干
                寄地盘干 = 寄地盘干分布[原宫位键]
                寄天盘干分布[宫位键] = 寄地盘干
        
        # 移除处理五宫天盘干的逻辑，五宫不应该有天盘干
        # 五宫只有地盘干，不参与天盘干的排布
            
        # 更新天盘干和寄天盘干到奇门遁甲数据
        for 宫位键, 天盘干 in 天盘干分布.items():
            if 宫位键 in self.奇门遁甲数据 and 宫位键 != "五宫":  # 确保不给五宫设置天盘干
                self.奇门遁甲数据[宫位键]["天盘干"] = 天盘干
                
                # 新增：更新寄天盘干
                if 宫位键 in 寄天盘干分布:
                    寄天盘干 = 寄天盘干分布[宫位键]
                    if 寄天盘干:  # 只在有值时更新
                        self.奇门遁甲数据[宫位键]["寄天盘干"] = 寄天盘干
                        print(f"将寄地盘干 {寄天盘干} 旋转到 {宫位键} 的寄天盘干")
                
                # 计算天盘干长生
                宫位数据 = self.奇门遁甲数据[宫位键]
                宫支列表 = 宫位数据.get("宫支", [])
                长生列表 = []
                for 宫支 in 宫支列表:
                    if 天盘干 and 宫支:
                        长生状态 = self.长生状态表.get(天盘干, {}).get(宫支, "")
                        长生列表.append(长生状态)
                    else:
                        长生列表.append("")
                宫位数据["天盘干长生"] = 长生列表
                
                # 新增：计算寄天盘干长生
                if 宫位键 in 寄天盘干分布:
                    寄天盘干 = 寄天盘干分布[宫位键]
                    if 寄天盘干:  # 只在有值时计算
                        寄长生列表 = []
                        for 宫支 in 宫支列表:
                            if 寄天盘干 and 宫支:
                                寄长生状态 = self.长生状态表.get(寄天盘干, {}).get(宫支, "")
                                寄长生列表.append(寄长生状态)
                            else:
                                寄长生列表.append("")
                        宫位数据["寄天盘干长生"] = 寄长生列表
        
        # 确保五宫的天盘干为空
        if "五宫" in self.奇门遁甲数据:
            self.奇门遁甲数据["五宫"]["天盘干"] = ""
            self.奇门遁甲数据["五宫"]["寄天盘干"] = ""
            self.奇门遁甲数据["五宫"]["天盘干长生"] = [""]
            self.奇门遁甲数据["五宫"]["寄天盘干长生"] = [""]
                
        return True

    def 排神煞(self):
        """
        排列八神的方法
        八神顺序永远为："值符""腾蛇""太阴""六合""白虎""玄武""九地""九天"
        宫位顺序为："92761834"（环形排列）
        根据局数确定阴阳遁，阳顺阴逆
        值符落在值符天干（旬首最后一字）所在的天盘干或寄天盘干对应的宫位
        然后按照顺序排列其他神煞
        
        同时计算"值符"字段：
        1. 获取值符天干（旬首的最后一个字）
        2. 查找该天干在地盘干中的宫位
        3. 找到该宫位的对应宫位的本位星
        4. 查询该本位星在天盘星中的位置，取其宫数
        5. 将结果格式化为"天禽8宫"这样的形式
        """
        # 获取必要的数据
        旬首 = self.奇门遁甲数据["起局信息"]["旬首"]
        if not 旬首 or len(旬首) < 3:
            print("警告：旬首数据不完整，无法排神煞")
            return False
            
        # 获取值符天干（旬首的最后一个字）
        值符天干 = 旬首[-1]
        print(f"排神煞 - 值符天干: {值符天干}")
        
        # 获取局数信息，确定阴阳遁
        局数信息 = self.奇门遁甲数据["起局信息"]["局数"]
        if not 局数信息:
            print("警告：局数信息为空，无法排神煞")
            return False
            
        # 解析局数信息
        try:
            遁 = "阳遁" if "阳" in 局数信息 else "阴遁"
            局数 = int(局数信息.replace("阳遁", "").replace("阴遁", "").replace("局", ""))
            print(f"排神煞 - 局数: {遁}{局数}局")
        except Exception as e:
            print(f"解析局数信息失败: {e}")
            return False
        
        # 八神顺序
        八神顺序 = ["值符", "腾蛇", "太阴", "六合", "白虎", "玄武", "九地", "九天"]
        
        # 奇门九宫顺序："92761834"（按圈排列）
        奇门九宫顺序 = ["九宫", "二宫", "七宫", "六宫", "一宫", "八宫", "三宫", "四宫"]
        
        # 找到值符天干在天盘干或寄天盘干中的宫位
        值符天干宫位 = None
        for 宫位键 in ["一宫", "二宫", "三宫", "四宫", "六宫", "七宫", "八宫", "九宫"]:  # 排除五宫
            if 宫位键 in self.奇门遁甲数据:
                天盘干 = self.奇门遁甲数据[宫位键].get("天盘干", "")
                寄天盘干 = self.奇门遁甲数据[宫位键].get("寄天盘干", "")
                
                # 先检查天盘干
                if 天盘干 == 值符天干:
                    值符天干宫位 = 宫位键
                    print(f"排神煞 - 找到值符天干 {值符天干} 在天盘干宫位: {值符天干宫位}")
                    break
                
                # 如果天盘干不匹配，检查寄天盘干
                elif 寄天盘干 == 值符天干:
                    值符天干宫位 = 宫位键
                    print(f"排神煞 - 找到值符天干 {值符天干} 在寄天盘干宫位: {值符天干宫位}")
                    break
        
        if not 值符天干宫位:
            print(f"警告：找不到值符天干 {值符天干} 在天盘干或寄天盘干中的宫位，无法排神煞")
            return False
            
        # 找到值符天干宫位在奇门九宫顺序中的索引
        if 值符天干宫位 in 奇门九宫顺序:
            值符天干宫位索引 = 奇门九宫顺序.index(值符天干宫位)
        else:
            print(f"警告：值符天干宫位 {值符天干宫位} 不在奇门九宫顺序中")
            return False
            
        # 创建八神分布字典
        八神分布 = {}
        
        # 根据阴阳遁确定排列方向
        if 遁 == "阳遁":
            # 阳遁顺排
            for i, 神煞 in enumerate(八神顺序):
                索引 = (值符天干宫位索引 + i) % len(奇门九宫顺序)
                宫位 = 奇门九宫顺序[索引]
                八神分布[宫位] = 神煞
                print(f"排神煞 - 阳遁顺排 - {神煞} 落在 {宫位}")
        else:
            # 阴遁逆排
            for i, 神煞 in enumerate(八神顺序):
                索引 = (值符天干宫位索引 - i) % len(奇门九宫顺序)
                宫位 = 奇门九宫顺序[索引]
                八神分布[宫位] = 神煞
                print(f"排神煞 - 阴遁逆排 - {神煞} 落在 {宫位}")
        
        # 更新八神到奇门遁甲数据
        for 宫位键, 神煞 in 八神分布.items():
            if 宫位键 in self.奇门遁甲数据:
                self.奇门遁甲数据[宫位键]["天八神"] = 神煞
                
                # 计算八神旺衰（可以根据实际需求来实现）
                # 这里只是一个示例，可以按照八神与宫位属性的关系来计算旺衰
                旺衰 = ["", ""]  # 示例：第一个位置表示与月支的关系，第二个位置表示与宫位的关系
                self.奇门遁甲数据[宫位键]["天八神旺衰"] = 旺衰
        
        # 确保五宫的天八神为空
        if "五宫" in self.奇门遁甲数据:
            self.奇门遁甲数据["五宫"]["天八神"] = ""
            self.奇门遁甲数据["五宫"]["天八神旺衰"] = ["", ""]
        
        # 计算"值符"字段
        # 1. 值符天干已经获取（旬首的最后一个字）
        # 2. 查找该天干在地盘干中的宫位
        值符天干地盘宫位 = None
        for 宫位键, 宫位数据 in self.奇门遁甲数据.items():
            if "宫" in 宫位键:  # 确保是宫位键
                地盘干 = 宫位数据.get("地盘干", "")
                if 地盘干 == 值符天干:
                    值符天干地盘宫位 = 宫位键
                    print(f"找到值符天干 {值符天干} 在地盘干宫位: {值符天干地盘宫位}")
                    break
        
        if 值符天干地盘宫位:
            # 3. 直接获取该宫位的本位星
            if 值符天干地盘宫位 in self.奇门遁甲数据:
                本位星 = self.奇门遁甲数据[值符天干地盘宫位].get("本位星", "")
                print(f"值符天干地盘宫位 {值符天干地盘宫位} 的本位星: {本位星}")
                
                # 4. 查询该本位星在天盘星中或寄宫星的位置
                本位星宫位 = None
                本位星宫数 = ""
                # 提取本位星的最后一个字，用于与寄宫星匹配
                本位星最后一字 = 本位星[-1] if len(本位星) > 0 else ""
                print(f"本位星: {本位星}, 最后一字: {本位星最后一字}")
                
                for 宫位键, 宫位数据 in self.奇门遁甲数据.items():
                    if "宫" in 宫位键:  # 确保是宫位键
                        天盘星 = 宫位数据.get("天盘星", "")
                        寄宫星 = 宫位数据.get("寄宫星", "")
                        
                        # 先检查天盘星
                        if 天盘星 == 本位星:
                            本位星宫位 = 宫位键
                            本位星宫数 = 宫位数据.get("宫数", "")
                            print(f"找到本位星 {本位星} 在天盘星宫位: {本位星宫位}, 宫数: {本位星宫数}")
                            break
                        
                        # 如果天盘星不匹配，检查寄宫星
                        # 寄宫星通常只有一个字，如"禽"而不是"天禽"
                        elif 寄宫星 and 寄宫星 == 本位星最后一字:
                            本位星宫位 = 宫位键
                            本位星宫数 = 宫位数据.get("宫数", "")
                            print(f"找到本位星最后一字 {本位星最后一字} 匹配寄宫星 {寄宫星} 在宫位: {本位星宫位}, 宫数: {本位星宫数}")
                            break
                
                # 5. 将结果格式化为"天禽8宫"这样的形式
                if 本位星 and 本位星宫数:
                    # 将宫数从汉字转换为阿拉伯数字
                    汉字宫数 = 本位星宫数
                    
                    汉字数字映射 = {
                        "一": "1", "二": "2", "三": "3", "四": "4", "五": "5",
                        "六": "6", "七": "7", "八": "8", "九": "9"
                    }
                    
                    if 汉字宫数 in 汉字数字映射:
                        阿拉伯宫数 = 汉字数字映射[汉字宫数]
                    else:
                        # 如果已经是阿拉伯数字或其他格式，保持原样
                        阿拉伯宫数 = 汉字宫数
                    
                    值符结果 = f"{本位星}{阿拉伯宫数}宫"
                    self.奇门遁甲数据["起局信息"]["值符"] = 值符结果
                    print(f"设置值符: {值符结果}")
                else:
                    print(f"警告：未能找到本位星 {本位星} 在天盘星或寄宫星中的位置，无法设置值符")
            else:
                print(f"警告：找不到宫位 {值符天干地盘宫位} 或其本位星，无法设置值符")
        else:
            print(f"警告：找不到值符天干 {值符天干} 在地盘干中的宫位，无法设置值符")
                
        return True

    def 排盘(self):
        """
        执行奇门遁甲排盘的主要步骤
        """
        # 1. 计算符头
        符头 = self.计算符头()
        
        # 2. 排地盘干
        if not self.排地盘干():
            print("警告：排地盘干失败")
        
        # 3. 计算旬首
        self.计算旬首()
        
        # 4. 排天盘干
        if not self.排天盘干():
            print("警告：排天盘干失败")
        else:
            print("排天盘干成功")
            
        # 5. 排九星
        if not self.排九星():
            print("警告：排九星失败")
        else:
            print("排九星成功")
            
        # 6. 排神煞
        if not self.排神煞():
            print("警告：排神煞失败")
        else:
            print("排神煞成功")
        
        return

    def 判断五行旺衰(self, 五行1, 五行2):
        """
        判断五行相互关系的旺衰状态
        同我者为相，我生者为旺，生我者为废，我克者为休，克我者为囚
        
        :param 五行1: 主体五行
        :param 五行2: 参照五行
        :return: 旺衰状态（相、旺、废、休、囚）
        """
        # 五行相生关系：木生火，火生土，土生金，金生水，水生木
        五行相生 = {
            "木": "火",
            "火": "土",
            "土": "金",
            "金": "水",
            "水": "木"
        }
        
        # 五行相克关系：木克土，土克水，水克火，火克金，金克木
        五行相克 = {
            "木": "土",
            "土": "水",
            "水": "火",
            "火": "金",
            "金": "木"
        }
        
        # 判断旺衰状态
        if 五行1 == 五行2:
            return "相"  # 同我者为相
        elif 五行相生.get(五行1) == 五行2:
            return "旺"  # 我生者为旺
        elif 五行相生.get(五行2) == 五行1:
            return "废"  # 生我者为废
        elif 五行相克.get(五行1) == 五行2:
            return "休"  # 我克者为休
        elif 五行相克.get(五行2) == 五行1:
            return "囚"  # 克我者为囚
        else:
            return ""  # 未知关系
    
    def 获取天干五行(self, 天干):
        """
        获取天干对应的五行
        
        :param 天干: 天干字符
        :return: 五行属性
        """
        天干五行 = {
            "甲": "木", "乙": "木",
            "丙": "火", "丁": "火",
            "戊": "土", "己": "土",
            "庚": "金", "辛": "金",
            "壬": "水", "癸": "水"
        }
        return 天干五行.get(天干, "")
    
    def 获取地支五行(self, 地支):
        """
        获取地支对应的五行
        
        :param 地支: 地支字符
        :return: 五行属性
        """
        地支五行 = {
            "子": "水",
            "丑": "土",
            "寅": "木",
            "卯": "木",
            "辰": "土",
            "巳": "火",
            "午": "火",
            "未": "土",
            "申": "金",
            "酉": "金",
            "戌": "土",
            "亥": "水"
        }
        return 地支五行.get(地支, "")
    
    def 获取九星五行(self, 九星):
        """
        获取九星对应的五行
        
        :param 九星: 九星名称
        :return: 五行属性
        """
        九星五行 = {
            "天蓬": "水",
            "天任": "土",
            "天冲": "木",
            "天辅": "木",
            "天英": "火",
            "天芮": "土",
            "天柱": "金",
            "天心": "金",
            "天禽": "土"
        }
        return 九星五行.get(九星, "")
    
    def 获取宫位五行(self, 宫位):
        """
        获取宫位对应的五行
        
        :param 宫位: 宫位名称
        :return: 五行属性
        """
        宫位五行 = {
            "九宫": "火",
            "八宫": "土",
            "七宫": "金",
            "六宫": "金",
            "五宫": "土",
            "四宫": "木",
            "三宫": "木",
            "二宫": "土",
            "一宫": "水"
        }
        return 宫位五行.get(宫位, "")
    
    def 计算星宫旺衰(self, 星五行, 月支, 宫位):
        """
        计算星宫旺衰，分别根据月支五行和宫位五行来判断
        
        :param 星五行: 九星的五行属性
        :param 月支: 当月月支
        :param 宫位: 宫位名称
        :return: [月支旺衰, 宫位旺衰]
        """
        月支五行 = self.获取地支五行(月支)
        宫位五行 = self.获取宫位五行(宫位)
        
        月支旺衰 = self.判断五行旺衰(星五行, 月支五行)
        宫位旺衰 = self.判断五行旺衰(星五行, 宫位五行)
        
        return [月支旺衰, 宫位旺衰]

    def 排九星(self):
        """
        排列九星的方法
        1. 定义九星的本位: 一宫天蓬(水)、二宫天芮(土)、三宫天冲(木)、四宫天辅(木)
                       五宫天禽(土)、六宫天心(金)、七宫天柱(金)、八宫天任(土)、九宫天英(火)
        2. 取旬首值的最后一个字（值符天干A）
        3. 取时柱的天干（B）
        4. 在地盘干中找到A和B所在的宫位
        5. 计算旋转步数，并按照"92761834"环形顺序旋转九星
        
        特殊情况：
        - 当时柱天干位于五宫时，将值符天干放在二宫位置
        - 当值符天干位于五宫时，将其放在二宫位置
        然后按正常逻辑排列
        
        注意：五宫(天禽)不参与天盘星排布，只作为本位星存在
        寄宫星只显示本位星的最后一个字（如天禽显示为禽，天心显示为心）
        """
        # 内部方法：判断五行旺衰
        def 判断五行旺衰(五行1, 五行2):
            """
            判断五行相互关系的旺衰状态
            同我者为相，我生者为旺，生我者为废，我克者为休，克我者为囚
            
            :param 五行1: 主体五行
            :param 五行2: 参照五行
            :return: 旺衰状态（相、旺、废、休、囚）
            """
            # 五行相生关系：木生火，火生土，土生金，金生水，水生木
            五行相生 = {
                "木": "火",
                "火": "土",
                "土": "金",
                "金": "水",
                "水": "木"
            }
            
            # 五行相克关系：木克土，土克水，水克火，火克金，金克木
            五行相克 = {
                "木": "土",
                "土": "水",
                "水": "火",
                "火": "金",
                "金": "木"
            }
            
            # 判断旺衰状态
            if 五行1 == 五行2:
                return "相"  # 同我者为相
            elif 五行相生.get(五行1) == 五行2:
                return "旺"  # 我生者为旺
            elif 五行相生.get(五行2) == 五行1:
                return "废"  # 生我者为废
            elif 五行相克.get(五行1) == 五行2:
                return "休"  # 我克者为休
            elif 五行相克.get(五行2) == 五行1:
                return "囚"  # 克我者为囚
            else:
                return ""  # 未知关系
        
        # 内部方法：获取地支五行
        def 获取地支五行(地支):
            """
            获取地支对应的五行
            
            :param 地支: 地支字符
            :return: 五行属性
            """
            地支五行 = {
                "子": "水",
                "丑": "土",
                "寅": "木",
                "卯": "木",
                "辰": "土",
                "巳": "火",
                "午": "火",
                "未": "土",
                "申": "金",
                "酉": "金",
                "戌": "土",
                "亥": "水"
            }
            return 地支五行.get(地支, "")
        
        # 内部方法：获取九星五行
        def 获取九星五行(九星):
            """
            获取九星对应的五行
            
            :param 九星: 九星名称
            :return: 五行属性
            """
            九星五行 = {
                "天蓬": "水",
                "天任": "土",
                "天冲": "木",
                "天辅": "木",
                "天英": "火",
                "天芮": "土",
                "天柱": "金",
                "天心": "金",
                "天禽": "土"
            }
            return 九星五行.get(九星, "")
        
        # 内部方法：获取宫位五行
        def 获取宫位五行(宫位):
            """
            获取宫位对应的五行
            
            :param 宫位: 宫位名称
            :return: 五行属性
            """
            宫位五行 = {
                "九宫": "火",
                "八宫": "土",
                "七宫": "金",
                "六宫": "金",
                "五宫": "土",
                "四宫": "木",
                "三宫": "木",
                "二宫": "土",
                "一宫": "水"
            }
            return 宫位五行.get(宫位, "")
        
        # 内部方法：计算星宫旺衰
        def 计算星宫旺衰(星五行, 月支, 宫位):
            """
            计算星宫旺衰，分别根据月支五行和宫位五行来判断
            
            :param 星五行: 九星的五行属性
            :param 月支: 当月月支
            :param 宫位: 宫位名称
            :return: [月支旺衰, 宫位旺衰]
            """
            月支五行 = 获取地支五行(月支)
            宫位五行 = 获取宫位五行(宫位)
            
            月支旺衰 = 判断五行旺衰(星五行, 月支五行)
            宫位旺衰 = 判断五行旺衰(星五行, 宫位五行)
            
            return [月支旺衰, 宫位旺衰]
        
        # 获取必要的数据
        旬首 = self.奇门遁甲数据["起局信息"]["旬首"]
        if not 旬首 or len(旬首) < 3:
            print("警告：旬首数据不完整，无法排九星")
            return False
        
        # 获取当月月支（用于计算旺衰）
        月支 = ""
        try:
            月支 = self.奇门遁甲数据["起局信息"]["四柱干支"][1][1]  # 月柱地支
            print(f"当月月支: {月支}")
        except:
            print("获取当月月支失败，使用默认值")
            # 默认使用寅月
            月支 = "寅"
        
        # 获取值符天干（A）- 旬首的最后一个字
        值符天干 = 旬首[-1]
        print(f"值符天干: {值符天干}")
        
        # 获取时柱天干（B）
        时柱 = self.奇门遁甲数据["起局信息"]["四柱干支"][3]
        时柱天干 = 时柱[0]
        print(f"时柱天干: {时柱天干}")
        
        # 奇门九宫顺序："92761834"（按圈排列）
        奇门九宫顺序 = ["九宫", "二宫", "七宫", "六宫", "一宫", "八宫", "三宫", "四宫"]
        
        # 定义九星本位
        九星本位 = {
            "一宫": "天蓬",  # 水
            "二宫": "天芮",  # 土
            "三宫": "天冲",  # 木
            "四宫": "天辅",  # 木
            "五宫": "天禽",  # 土
            "六宫": "天心",  # 金
            "七宫": "天柱",  # 金
            "八宫": "天任",  # 土
            "九宫": "天英"   # 火
        }
        
        # 更新九星本位到奇门遁甲数据
        for 宫位键, 星名 in 九星本位.items():
            if 宫位键 in self.奇门遁甲数据:
                self.奇门遁甲数据[宫位键]["本位星"] = 星名
                print(f"设置 {宫位键} 的本位星为 {星名}")
        
        # 获取地盘干分布
        地盘干分布 = {}
        for 宫位键 in ["一宫", "二宫", "三宫", "四宫", "五宫", "六宫", "七宫", "八宫", "九宫"]:
            if 宫位键 in self.奇门遁甲数据:
                地盘干 = self.奇门遁甲数据[宫位键].get("地盘干", "")
                地盘干分布[宫位键] = 地盘干
        
        # 找到时柱天干（B）在地盘干中的宫位
        时柱天干宫位 = None
        for 宫位键, 地盘干 in 地盘干分布.items():
            if 地盘干 == 时柱天干:
                时柱天干宫位 = 宫位键
                break
                
        if not 时柱天干宫位:
            print(f"警告：找不到时柱天干 {时柱天干} 在地盘干中的宫位")
            return False
            
        # 找到值符天干（A）在地盘干中的宫位
        值符天干宫位 = None
        for 宫位键, 地盘干 in 地盘干分布.items():
            if 地盘干 == 值符天干:
                值符天干宫位 = 宫位键
                break
                
        if not 值符天干宫位:
            print(f"警告：找不到值符天干 {值符天干} 在地盘干中的宫位")
            return False
        
        # 特殊情况处理：当时干或值符天干在五宫时
        if 时柱天干宫位 == "五宫":
            print(f"检测到时干在五宫的特殊情况，使用二宫作为时干宫位")
            时柱天干宫位 = "二宫"  # 时干在五宫时，使用二宫作为时干宫位
            
        if 值符天干宫位 == "五宫":
            print(f"检测到值符天干在五宫的特殊情况，将值符天干宫位设为二宫")
            值符天干宫位 = "二宫"  # 五宫值符特殊处理，将值符天干宫位设为二宫
        
        # 计算需要旋转的步数（A到B）
        if 值符天干宫位 in 奇门九宫顺序 and 时柱天干宫位 in 奇门九宫顺序:
            值符天干索引 = 奇门九宫顺序.index(值符天干宫位)
            时柱天干索引 = 奇门九宫顺序.index(时柱天干宫位)
            旋转步数 = (时柱天干索引 - 值符天干索引) % len(奇门九宫顺序)
            print(f"旋转步数: {旋转步数}（从 {值符天干宫位} 到 {时柱天干宫位}）")
        else:
            print(f"警告：值符天干宫位 {值符天干宫位} 或时柱天干宫位 {时柱天干宫位} 不在奇门九宫顺序中")
            return False
        
        # 获取五宫的本位星(天禽)并简化为"禽"
        五宫本位星 = 九星本位["五宫"]
        
        # 简化五宫本位星，只保留最后一个字
        简化五宫本位星 = 五宫本位星[-1] if len(五宫本位星) > 0 else ""
        print(f"简化后的五宫本位星: {简化五宫本位星}")
        
        # 创建本位星分布字典
        本位星分布 = {}
        for 宫位键, 星名 in 九星本位.items():
            本位星分布[宫位键] = 星名
            print(f"宫位 {宫位键} 的本位星: {星名}")
        
        # 按照"92761834"顺序旋转九星
        天盘星分布 = {}
        简化天盘星分布 = {}  # 用于存储简化后的天盘星（只保留最后一个字）
        
        # 确定寄宫星目标位置：天禽星（五宫本位星）寄存在二宫
        二宫旋转后的宫位 = None
        for i, 宫位键 in enumerate(奇门九宫顺序):
            原宫位索引 = (i - 旋转步数) % len(奇门九宫顺序)
            原宫位键 = 奇门九宫顺序[原宫位索引]
            
            if 原宫位键 == "二宫":
                二宫旋转后的宫位 = 宫位键
                break
        
        五宫寄宫星目标宫位 = 二宫旋转后的宫位
        print(f"二宫旋转后的位置: {二宫旋转后的宫位}, 将寄宫星设置在此位置")
        
        # 执行九星旋转
        for i, 宫位键 in enumerate(奇门九宫顺序):
            原宫位索引 = (i - 旋转步数) % len(奇门九宫顺序)
            原宫位键 = 奇门九宫顺序[原宫位索引]
            
            if 原宫位键 in 本位星分布:
                天盘星 = 本位星分布[原宫位键]
                天盘星分布[宫位键] = 天盘星
                
                # 计算简化的天盘星（只保留最后一个字）
                简化天盘星 = 天盘星[-1] if len(天盘星) > 0 else ""
                简化天盘星分布[宫位键] = 简化天盘星
                
                print(f"将 {原宫位键} 的本位星 {天盘星} 旋转到 {宫位键} 的天盘星位置，简化为 {简化天盘星}")
        
        # 更新天盘星到奇门遁甲数据，除了五宫
        for 宫位键, 天盘星 in 天盘星分布.items():
            if 宫位键 in self.奇门遁甲数据 and 宫位键 != "五宫":
                # 获取简化的天盘星
                简化天盘星 = 简化天盘星分布.get(宫位键, "")
                # 使用完整的天盘星名称
                self.奇门遁甲数据[宫位键]["天盘星"] = 天盘星
                print(f"设置 {宫位键} 的天盘星为 {天盘星}")
                
                # 计算天盘星旺衰
                星五行 = 获取九星五行(天盘星)
                if 星五行:
                    天盘星旺衰 = 计算星宫旺衰(星五行, 月支, 宫位键)
                    self.奇门遁甲数据[宫位键]["天盘星旺衰"] = 天盘星旺衰
                    print(f"{宫位键} 的天盘星 {天盘星}(五行:{星五行}) 在 {月支}月 的旺衰: {天盘星旺衰}")
                else:
                    # 如果无法获取五行，使用空值
                    self.奇门遁甲数据[宫位键]["天盘星旺衰"] = ["", ""]
                
                # 清空所有宫位的寄宫星
                self.奇门遁甲数据[宫位键]["寄宫星"] = ""
                self.奇门遁甲数据[宫位键]["寄宫星旺衰"] = ["", ""]
        
        # 如果找到了五宫寄宫星的目标宫位，则设置该宫位的寄宫星
        if 五宫寄宫星目标宫位 and 简化五宫本位星 and 五宫寄宫星目标宫位 in self.奇门遁甲数据:
            self.奇门遁甲数据[五宫寄宫星目标宫位]["寄宫星"] = 简化五宫本位星
            print(f"将五宫本位星简化后的 {简化五宫本位星} 设置为 {五宫寄宫星目标宫位} 的寄宫星")
            
            # 计算寄宫星旺衰
            星五行 = 获取九星五行(五宫本位星)
            if 星五行:
                寄宫星旺衰 = 计算星宫旺衰(星五行, 月支, 五宫寄宫星目标宫位)
                self.奇门遁甲数据[五宫寄宫星目标宫位]["寄宫星旺衰"] = 寄宫星旺衰
                print(f"{五宫寄宫星目标宫位} 的寄宫星 {简化五宫本位星}(五行:{星五行}) 在 {月支}月 的旺衰: {寄宫星旺衰}")
            else:
                # 如果无法获取五行，使用空值
                self.奇门遁甲数据[五宫寄宫星目标宫位]["寄宫星旺衰"] = ["", ""]
        
        # 确保五宫的天盘星为空
        if "五宫" in self.奇门遁甲数据:
            self.奇门遁甲数据["五宫"]["天盘星"] = ""
            self.奇门遁甲数据["五宫"]["天盘星旺衰"] = [""]
            self.奇门遁甲数据["五宫"]["寄宫星"] = ""
            self.奇门遁甲数据["五宫"]["寄宫星旺衰"] = ["", ""]
        
        return True


# 测试代码
if __name__ == "__main__":
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M')
    print(f"当前时间: {current_time}")
    
    # 创建奇门遁甲对象，使用当前时间和地区
    try:
        qm = 奇门遁甲(起局时间=current_time, 起局法='拆补法', 地区='合浦县')
        
        # 计算符头
        符头 = qm.计算符头()
        
        # 执行排盘
        qm.排盘()
        
        # 打印结果
        latitude, longitude, true_solar_time = qm.真太阳时计算()
        print(f"经纬度: {longitude},{latitude}")
        print(f"真太阳时间: {true_solar_time}")
        print(f"奇门遁甲数据起局时间: {qm.奇门遁甲数据['起局信息']['起局时间']}")
        
        # 打印农历信息
        print(f"农历: {qm.奇门遁甲数据['起局信息']['农历']}")
        
        # 打印节气内容
        节气列表 = qm.奇门遁甲数据['起局信息']['节气']
        if len(节气列表) >= 2:
            print(f"当前节气: {节气列表[0]['name']}, 交节时间: {节气列表[0]['date']}")
            print(f"下一节气: {节气列表[1]['name']}, 交节时间: {节气列表[1]['date']}")
        else:
            print(f"节气信息不完整: {节气列表}")
        
        print(f"是否真太阳时: {qm.奇门遁甲数据['起局信息']['是否真太阳时']}")
        print(f"四柱干支: {qm.奇门遁甲数据['起局信息']['四柱干支']}")
        print(f"符头: {qm.奇门遁甲数据['起局信息']['符头']}")
        print(f"局数: {qm.奇门遁甲数据['起局信息']['局数']}")
        
        # 打印每个宫位的地盘干和天盘干
        print("\n各宫位的地盘干和天盘干:")
        for 宫位 in ["一宫", "二宫", "三宫", "四宫", "五宫", "六宫", "七宫", "八宫", "九宫"]:
            地盘干 = qm.奇门遁甲数据[宫位].get("地盘干", "")
            天盘干 = qm.奇门遁甲数据[宫位].get("天盘干", "")
            print(f"{宫位} - 地盘干: {地盘干}, 天盘干: {天盘干}")
        
        # 只打印必要的奇门遁甲数据，避免过多输出
        简化数据 = {
            "起局信息": qm.奇门遁甲数据
        }
        print(f"奇门遁甲起局信息: {简化数据}")
    
    except Exception as e:
        print(f"测试时发生错误: {str(e)}")
        import traceback
        traceback.print_exc()
        